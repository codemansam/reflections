What happens when you initialize a repository? Why do you need to do it?

Git sets up the background meta data files and whatnot that will keep track of
commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory because it is where you choose which files IN the working
directory you are going to commit.  It is different from the repository because the repository is the total of
all the files and commits for the project.

It's value is in being able to choose which files to save to a new commit.

How can you use the staging area to make sure you have one commit per logical change?

You can compare the staging area to the working directory and make sure that you aren't trying to
add too many different files with more than one logical change at a time.  You might realise that there
are more changes in the working directory than you first realised and decide to drop a file from the
commit to make a seperate one.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you were making an experimental change that you aren't sure you will keep for the final version. Anything
that isn't going to be an iterative change but a drastic or unrelated departure from what you currently have
like a different language setting.  Branches help because you could go a long way down an offshoot idea and then decide it's not working after all and abandon that branch.  If you are working on a lot of features for a narrow
aspect of your program it makes sense that someone can check the commits related to that particular thing rather
than finding it all mixed in with the work being done in the master branch.  It would obviously help when multiple people are working on a piece of software.  The project can be broken up and different people can work on different aspects.  Anyone who needs to figure out what someone else has been doing can look at their branch and read the commit log to see how progress is being made.

How do the diagrams help you visualize the branch structure?

The diagram makes it very easy to see the different branches and how reachable different commits are depending on
what branch you have checked out.

It also helped me to understand the concept of detached head.  It makes sense that if you checkout a commit that isn't itself a branch then it will not be reachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is having the changes from both branches brought together in such a way that nothing is broken and whatever new feature introduced and perfected in the off shoot branch is combined into the main branch.  We represent it in the diagram the way we do to show that the non main branch is joining back into the main.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatically merging makes it super easy to merge code in unambiguous circumstances.  Fast, efficient.  But when there is some question about what code should stay and what should go in cases where different branches have modified the same parts of the main branch code it needs to be done manually.  This ensures no weird errors creep into the code base but is slower and requires somebody who knows what the code is supposed to be doing to make judgement calls about how to resolve any conflicts.

// Helpful git commands:
git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
